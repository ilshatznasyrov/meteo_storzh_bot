# -*- coding: utf-8 -*-
import telebot
from telebot import types
import requests
import matplotlib.pyplot as plt
import datetime
from io import BytesIO


# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
BOT_TOKEN = '7796116228:AAH2boc2j5TG50g142P3sfOrcct4yFroDIc'
OPENWEATHER_TOKEN = 'da76567bd6535728aeb65dae2431576d'
XRAS_JSON_URL = 'https://xras.ru/txt/kpm_RAL5.json'
XRAS_FORECAST_URL = 'https://xras.ru/txt/kpf_RAL5.json'

bot = telebot.TeleBot(BOT_TOKEN)
user_diary = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
user_locations = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ä–æ–¥–∞)
user_editing_state = {}


# ======= –ö–ù–û–ü–ö–ò =======
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìà –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏', 'üå§ –ü–æ–≥–æ–¥–∞')
    markup.add('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'üìó –î–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è')  # –æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç –î–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
    return markup

# ======= –ì–†–ê–§–ò–ö –ë–£–†–¨ =======
def get_k_index_from_json():
    try:
        response = requests.get(XRAS_JSON_URL)
        data = response.json()
        entries = data['data'] if 'data' in data else data
        dates = []
        kp_values = []
        for entry in reversed(entries):
            date_obj = datetime.datetime.strptime(entry['time'], '%Y-%m-%d')
            dates.append(date_obj)
            kp_values.append(float(entry['max_kp']))
        return dates, kp_values, entries
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Kp: {e}")
        return [], [], []

def get_kp_forecast():
    try:
        response = requests.get(XRAS_FORECAST_URL)
        data = response.json()['data']
        today = datetime.datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
        today_entry = next((d for d in data if d['time'] == today), None)
        tomorrow_entry = next((d for d in data if d['time'] == tomorrow), None)
        return today_entry, tomorrow_entry
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ Kp: {e}")
        return None, None

def format_kp_level(kp):
    kp = float(kp)
    if kp < 4:
        return f"üü¢ –ù–∏–∑–∫–∏–π"
    elif kp < 6:
        return f"üü† –£–º–µ—Ä–µ–Ω–Ω—ã–π"
    else:
        return f"üî¥ –í—ã—Å–æ–∫–∏–π"

def generate_kp_graph():
    dates, kp_values, entries = get_k_index_from_json()
    if not dates:
        return None

    today_date = datetime.datetime.now().strftime('%Y-%m-%d')
    today_kp_entry = next((entry for entry in entries if entry['time'] == today_date), {'max_kp': 0})
    today_kp = float(today_kp_entry['max_kp'])

    plt.figure(figsize=(10, 5))
    bars = plt.bar(dates, kp_values, color=['green' if v < 4 else 'orange' if v < 5 else 'red' for v in kp_values])

    plt.axhline(4, color='orange', linestyle='--', label='–£–º–µ—Ä–µ–Ω–Ω—ã–π (Kp=4)')
    plt.axhline(6, color='red', linestyle='--', label='–í—ã—Å–æ–∫–∏–π (Kp=6)')
    plt.title("–ü—Ä–æ–≥–Ω–æ–∑ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å (Kp –∏–Ω–¥–µ–∫—Å)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("Kp –∏–Ω–¥–µ–∫—Å")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()

    plt.figtext(0.99, 0.01, f"–£—Ä–æ–≤–µ–Ω—å –º–∞–≥–Ω–∏—Ç–Ω–æ–π –±—É—Ä–∏ (Kp) —Å–µ–≥–æ–¥–Ω—è: {today_kp}", ha="right", fontsize=10, color="blue")

    image = BytesIO()
    plt.savefig(image, format='png')
    image.seek(0)
    plt.close()
    return image

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å –∏ –ø–æ–≥–æ–¥—ã üåå\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:", reply_markup=main_keyboard())

@bot.message_handler(func=lambda msg: msg.text == 'üìà –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏')
def send_kp_graph(message):
    img = generate_kp_graph()
    if img:
        bot.send_photo(message.chat.id, img, caption="–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å (Kp –∏–Ω–¥–µ–∫—Å)")

        today_entry, tomorrow_entry = get_kp_forecast()
        forecast_text = "\n\n<b>–ü—Ä–æ–≥–Ω–æ–∑ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å:</b>"
        if today_entry:
            forecast_text += f"\nüìÖ <b>–°–µ–≥–æ–¥–Ω—è ({today_entry['time']}):</b>\n¬ª Kp: {today_entry['max_kp']} ({format_kp_level(today_entry['max_kp'])})\n¬ª Ap: {today_entry['ap']}\n¬ª F10.7: {today_entry['f10']}"
        if tomorrow_entry:
            forecast_text += f"\n\nüìÖ <b>–ó–∞–≤—Ç—Ä–∞ ({tomorrow_entry['time']}):</b>\n¬ª Kp: {tomorrow_entry['max_kp']} ({format_kp_level(tomorrow_entry['max_kp'])})\n¬ª Ap: {tomorrow_entry['ap']}\n¬ª F10.7: {tomorrow_entry['f10']}"

        bot.send_message(message.chat.id, forecast_text, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å")

# ======= –ü–û–ì–û–î–ê =======
def get_weather_json(city_name):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å –∏ –ø–æ–≥–æ–¥—ã üåå\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:", reply_markup=main_keyboard())

@bot.message_handler(func=lambda msg: msg.text == 'üìà –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏')
def send_kp_graph(message):
    img = generate_kp_graph()
    if img:
        bot.send_photo(message.chat.id, img, caption="–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å (Kp –∏–Ω–¥–µ–∫—Å)")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å üòï")

@bot.message_handler(func=lambda msg: msg.text == 'üå§ –ü–æ–≥–æ–¥–∞')
def ask_city_weather(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üåç:")
    bot.register_next_step_handler(msg, show_weather)

def show_weather(message):
    city = message.text
    weather = get_weather_json(city)
    if weather and weather.get('main'):
        temp = round(weather['main']['temp'])
        feels_like = round(weather['main']['feels_like'])
        pressure_hpa = weather['main']['pressure']
        pressure_mmhg = round(pressure_hpa * 0.75006)
        humidity = weather['main']['humidity']
        wind_speed = weather['wind']['speed']
        description = weather['weather'][0]['description'].capitalize()
        pop = weather.get('pop', 0) * 100 if 'pop' in weather else 0

        if pressure_mmhg < 100:
            pressure_status = "(–ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ)"
        elif pressure_mmhg > 110:
            pressure_status = "(–ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ)"
        else:
            pressure_status = "(–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã)"

        user_locations[message.chat.id] = city

        weather_text = (
            f"üìç –ì–æ—Ä–æ–¥: {city}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, {description}\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"‚ÅâÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure_mmhg} –º–º —Ä—Ç. —Å—Ç. {pressure_status}\n"
            f"üå¶ –û—Å–∞–¥–∫–∏: {int(pop)}%\n"
        )

        bot.send_message(message.chat.id, weather_text)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòû")

@bot.message_handler(func=lambda msg: msg.text == 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
def generate_advice(message):
    city = user_locations.get(message.chat.id)
    if not city:
        msg = bot.send_message(message.chat.id, "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ üåç:")
        bot.register_next_step_handler(msg, set_city_and_generate_advice)
        return
    send_advice(message, city)

def set_city_and_generate_advice(message):
    city = message.text
    user_locations[message.chat.id] = city
    send_advice(message, city)

def send_advice(message, city):
    weather_info = get_weather_json(city)
    _, _, entries = get_k_index_from_json()

    if not weather_info or not entries:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö üòï")
        return

    pressure_hpa = weather_info['main']['pressure']
    pressure_mmhg = round(pressure_hpa * 0.75006)
    temp = round(weather_info['main']['temp'])
    description = weather_info['weather'][0]['description'].lower()

    today_date = datetime.datetime.now().strftime('%Y-%m-%d')
    today_kp_entry = next((entry for entry in entries if entry['time'] == today_date), {'max_kp': 0})
    kp = float(today_kp_entry['max_kp'])

    if kp < 4:
        kp_text = "–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –¥–µ–Ω—å –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å —Å–ø–æ–∫–æ–π–Ω—ã–º."
        kp_risk = 0
    elif kp < 6:
        kp_text = "–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–º–µ—Ä–µ–Ω–Ω–∞—è. –£ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π –≤–æ–∑–º–æ–∂–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç."
        kp_risk = 1
    elif kp < 7:
        kp_text = "–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è —Å—Ä–µ–¥–Ω–µ–π —Å–∏–ª—ã. –ú–æ–≥—É—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å—Å—è –ª—ë–≥–∫–∏–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏—è."
        kp_risk = 2
    else:
        kp_text = "–°–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
        kp_risk = 3

    if pressure_mmhg < 740:
        pressure_text = "–ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–∞ –≤—è–ª–æ—Å—Ç—å –∏–ª–∏ –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å."
        pressure_risk = 1
    elif pressure_mmhg > 760:
        pressure_text = "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –ò–∑–±–µ–≥–∞–π—Ç–µ —á—Ä–µ–∑–º–µ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫."
        pressure_risk = 1
    else:
        pressure_text = "–î–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã."
        pressure_risk = 0

    bad_weather = any(word in description for word in ['–¥–æ–∂–¥—å', '–ø–∞—Å–º—É—Ä–Ω–æ', '–æ–±–ª–∞—á–Ω–æ', '–≥—Ä–æ–∑–∞', '—Ç—É–º–∞–Ω'])
    if bad_weather:
        weather_text = f"–ù–∞ —É–ª–∏—Ü–µ {description}. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏."
        weather_risk = 1
    else:
        weather_text = f"–ù–∞ —É–ª–∏—Ü–µ {description}. –ü–æ–≥–æ–¥–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫."
        weather_risk = 0

    total_risk = kp_risk + pressure_risk + weather_risk

    if total_risk == 0:
        final_advice = "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
    elif total_risk == 1:
        final_advice = "–ù–µ–±–æ–ª—å—à–æ–π –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤–æ–∑–º–æ–∂–µ–Ω. –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ—ë —Ç–µ–ª–æ –∏ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    elif total_risk == 2:
        final_advice = "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ –∏ –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ."
    else:
        final_advice = "–°–æ–≤–µ—Ç—É–µ–º —Å–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏–∑–±–µ–≥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–≤ –∏ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ —Å–µ–±–µ."

    response = (
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {city}\n\n"
        f"{kp_text}\n"
        f"{pressure_text}\n"
        f"{weather_text}\n\n"
        f"üîé {final_advice}"
    )

    bot.send_message(message.chat.id, response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
@bot.message_handler(func=lambda msg: msg.text == 'üìó –î–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è')
def diary(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=diary_keyboard())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º
def diary_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞')
    markup.row('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å', 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
    markup.row('üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–Ω–µ–≤–Ω–∏–∫', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    return markup

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@bot.message_handler(func=lambda msg: msg.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å')
def ask_feeling(message):
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?")
    bot.register_next_step_handler(message, save_feeling)

def save_feeling(message):
    user_id = message.chat.id
    feeling_text = message.text.strip()
    if len(feeling_text) > 50:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, save_feeling)
        return
    now = datetime.datetime.now()
    record = {
        "number": len(user_diary.get(user_id, [])) + 1,
        "date": now.strftime("%Y-%m-%d %H:%M"),
        "feeling": feeling_text
    }
    user_diary.setdefault(user_id, []).append(record)
    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=diary_keyboard())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞
@bot.message_handler(func=lambda msg: msg.text == 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞')
def show_diary(message):
    user_id = message.chat.id
    if user_id in user_diary and user_diary[user_id]:
        diary_text = "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è:\n"
        for idx, record in enumerate(reversed(user_diary[user_id]), start=1):
            diary_text += f"id {record['number']} | –î–∞—Ç–∞: {record['date']} | –ß—É–≤—Å—Ç–≤–æ: {record['feeling']}\n"
        bot.send_message(message.chat.id, diary_text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@bot.message_handler(func=lambda msg: msg.text == '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å')
def edit_feeling(message):
    user_id = message.chat.id
    if user_id in user_diary and user_diary[user_id]:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (id –∑–∞–ø–∏—Å–∏ —É–∫–∞–∑–∞–Ω –¥–Ω–µ–≤–Ω–∏–∫–µ üëâ üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞):")
        bot.register_next_step_handler(message, ask_new_text)

def ask_new_text(message):
    user_id = message.chat.id
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        record_number = int(message.text.strip())
        user_editing_state[user_id] = record_number
        bot.send_message(user_id, "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ? (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(message, save_edited_entry)
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∑–∞–ø–∏—Å–∏.")
        bot.register_next_step_handler(message, ask_new_text)

def save_edited_entry(message):
    user_id = message.chat.id
    try:
        # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
        new_text = message.text.strip()
        if len(new_text) > 50:
            bot.send_message(user_id, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, save_edited_entry)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏
        record_number = user_editing_state.get(user_id)
        if not record_number:
            bot.send_message(user_id, "–ù–µ –Ω–∞–π–¥–µ–Ω id –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
        for record in user_diary[user_id]:
            if record['number'] == record_number:
                record['feeling'] = new_text
                record['date'] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
                break

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        bot.send_message(user_id, "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=diary_keyboard())
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", reply_markup=diary_keyboard())

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@bot.message_handler(func=lambda msg: msg.text == 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
def delete_feeling(message):
    user_id = message.chat.id
    if user_id in user_diary and user_diary[user_id]:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, choose_delete_record)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

def choose_delete_record(message):
    user_id = message.chat.id
    try:
        record_number = int(message.text.strip())
        if user_id in user_diary and len(user_diary[user_id]) >= record_number > 0:
            deleted_record = user_diary[user_id].pop(record_number - 1)
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å c id {record_number} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            raise ValueError("–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e) + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, choose_delete_record)

# –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–Ω–µ–≤–Ω–∏–∫
@bot.message_handler(func=lambda msg: msg.text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–Ω–µ–≤–Ω–∏–∫')
def clear_diary(message):
    user_id = message.chat.id
    if user_id in user_diary:
        user_diary[user_id] = []  # –û—á–∏—â–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –æ—á–∏—â–µ–Ω!", reply_markup=diary_keyboard())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.", reply_markup=diary_keyboard())

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def go_back(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())





if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
